var documenterSearchIndex = {"docs":
[{"location":"#DynACof.jl:-The-Dynamic-Agroforestry-Coffee-Crop-Model-1","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","text":"","category":"section"},{"location":"#","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","text":"<img src=\"https://raw.githubusercontent.com/VEZY/DynACof/master/man/figures/logo.png\" alt=\"logo\" width=\"300\" align=\"right\" />","category":"page"},{"location":"#","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Build Status) (Image: Codecov)","category":"page"},{"location":"#Overview-1","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"Overview","text":"","category":"section"},{"location":"#","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","text":"This is a Julia version of the DynACof model. To get to the R version, please follow this link. DynACof is a process-based model that computes plot-scale Net Primary Productivity, carbon allocation, growth, yield, energy, and water balance of coffee plantations according to management, while accounting for spatial effects using metamodels from the 3D process-based MAESPA. The model also uses coffee bud and fruit cohorts for reproductive development to better represent fruit carbon demand distribution along the year.","category":"page"},{"location":"#Installation-1","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"Installation","text":"","category":"section"},{"location":"#","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","text":"To download DynACof, simply execute these lines of code in the REPL:","category":"page"},{"location":"#","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","text":"Pkg.add(DynACof)","category":"page"},{"location":"#","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","text":"The package is tested routinely to pass all tests using Travis-CI (linux) and AppVeyor (Windows).","category":"page"},{"location":"#Example-1","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"Example","text":"","category":"section"},{"location":"#","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","text":"This is a basic example using the parameters and meteorology from Vezy et al. (2019). The default values of the parameters in DynACof are already the ones from Vezy et al. (2019). To use those default values, you have to put \"package\" for each parameter in file_name. The meteorology data can be downloaded from a Github repository using the download command.","category":"page"},{"location":"#","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","text":"Execute this line of code to run a simulation over the whole period using both parameters values and meteorology from Vezy et al. (2019): ","category":"page"},{"location":"#","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","text":"using DynACof\nfile= download(\"https://raw.githubusercontent.com/VEZY/DynACof.jl_inputs/master/meteorology.txt\")\n\nSim, Meteo, Parameters= dynacof(input_path= dirname(file), file_name= (constants= \"package\",site=\"package\",meteo=basename(file),soil=\"package\",coffee=\"package\",tree=\"package\"))\n\nrm(file)","category":"page"},{"location":"#","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","text":"To use your own data, you have to tell DynACof where to find it using the input_path argument, and what are the file names with the file_name argument. A separate Github repository is available for input files templates with values from Vezy et al. (2019), and some help on how to proceed.","category":"page"},{"location":"#","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","text":"Example of a simulation without shade trees:","category":"page"},{"location":"#","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","text":"Sim, Meteo, Parameters= dynacof(input_path= \"the_path_where_you_downloaded_the_data/DynACof.jl_inputs\",\n                                file_name= (constants= \"constants.jl\",site=\"site.jl\",meteo=\"meteorology.txt\",\n                                            soil=\"soil.jl\",coffee=\"coffee.jl\",tree=\"\"));","category":"page"},{"location":"#Code-of-conduct-1","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"Code of conduct","text":"","category":"section"},{"location":"#","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","text":"Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms.","category":"page"},{"location":"#Acknowledgments-1","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"Acknowledgments","text":"","category":"section"},{"location":"#","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","text":"The DynACof model was mainly developed thanks to the MACCAC project[1], which was funded by the french ANR (Agence Nationale de la Recherche). The authors were funded by CIRAD[2] and INRA[3]. The authors are grateful for the support of the Aquiares farm and the CATIE[4] for the long-term coffee agroforestry trial, the SOERE F-ORE-T which is supported annually by Ecofor, Allenvi and the French national research infrastructure ANAEE-F; the CIRAD-IRD-SAFSE project (France) and the PCP platform of CATIE. CoffeeFlux observatory was supported and managed by CIRAD researchers. We are grateful to the staff from Costa-Rica, in particular Alvaro Barquero, Alejandra Barquero, Jenny Barquero, Alexis Perez, Guillermo Ramirez, Rafael Acuna, Manuel Jara, Alonso Barquero for their technical and field support.","category":"page"},{"location":"#","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","text":"","category":"page"},{"location":"#","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","text":"<sub>The DynACof logo was made using <a href=\"http://logomakr.com\" title=\"Logo Makr\">LogoMakr.com</a> </sub>","category":"page"},{"location":"#","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","text":"MACACC project ANR-13-AGRO-0005, Viabilité et Adaptation des  Ecosystèmes Productifs, Territoires et Ressources face aux  Changements Globaux AGROBIOSPHERE 2013 program\nCentre de Coopération Internationale en Recherche Agronomique pour  le Développement\nInstitut National de la Recherche Agronomique\nCentro Agronómico Tropical de Investigación y Enseñanza","category":"page"},{"location":"#","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","text":"","category":"page"},{"location":"#Index-1","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"Index","text":"","category":"section"},{"location":"#","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","text":"","category":"page"},{"location":"#","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","text":"Modules = [DynACof]","category":"page"},{"location":"#DynACof.coffee","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.coffee","text":"Parameter structures\n\nThose structures are used to make the parameter inputs to DynACof. Default values are provided to the user (the struct are Base.@kwdef). They are mainly used under the hood from [Import_Parameters()], but can still be called by the user for conveniance (but not needed  for a model run). The Parameters are divided into five structures: constants, site, soil, coffee, and tree.\n\nsite:\n\nThe site structure. The default values comes from a stand from the Aquiares farm located in Costa Rica. It is a Coffea arabica plantation in agroforestry management under Erythrina poeppigiana shade trees. The plot is visible at this address, and a full desciption is available here and here.\n\nconstants\n\nSee constants.\n\nsoil\n\nThe soil structure.\n\ncoffee\n\nThe coffee structure. The default values comes from a high density plantation (5580 coffee plants per hectares) of Coffea arabica var. Caturra pruned every year to sustain the production on three resprouts per stump in average (see same references than site).\n\ntree\n\nThe shade tree structure. The default values come from Erythrina poeppigiana shade trees from Aquiares. They were planted at high density  (250 trees ha-1) pruned to optimize light transmitted to the Coffea, and were thinned in 2000 to a low density of ~7.4 trees ha-1. Starting from 2000, these trees made a relatively large crown with an average height of 26 m in 2018 on this site.  NB: the tree parameter structure is optional, and not needed for monospecific coffee plantations.\n\nReturn\n\nAn instance of a structure with Parameters needed for a DynACof simulation.\n\nDetails\n\nThe values of the instance can be read from files using import_parameters. In that case, the user  can provide only the parameter values that need to be changed, and all others will be taken as the default values. Example files are provided in a specific Github repository here.\n\n\n\n\n\n","category":"type"},{"location":"#DynACof.constants","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.constants","text":"Physical constants used in the DynACof package\n\nThis function defines the following constants:\n\ncp: specific heat of air for constant pressure (J K^-1 kg^-1), Source: Allen 1998 FAO Eq. 8 p. 32\nepsi: Ratio of the molecular weight of water vapor to dry air (=Mw/Md)\npressure0: reference atmospheric pressure at sea level (kPa)\nFPAR: Fraction of global radiation that is PAR (source: MAESPA model)\ng: gravitational acceleration (m s^-2)\nRd: gas constant of dry air (J kg^-1 K^-1), source : Foken p. 245\nRgas: universal gas constant (J mol^-1 K^-1)\nKelvin: conversion degree Celsius to Kelvin\nvonkarman: von Karman constant (-)\nMJtoW: coefficient to convert MJ into W (W MJ^-1)\nGsc: solar constant (W m^-2=J m^-2 s^-1), source : Khorasanizadeh and Mohammadi (2016)\nσ (sigma): Stefan-Boltzmann constant (W m^-2 K^-4)\nH2OMW: Conversion factor from kg to mol for H2O (kg mol^-1)\nW_umol: Conversion factor from watt to micromole for H2O (W mu mol^-1)\nλ (lambda): Latent heat of vaporization (MJ kg_H2O^-1)\ncl: Drag coefficient per unit leaf area (m s^-1)\nDheat: Molecular diffusivity for heat (m s^-1)\nGBVGBH: Conversion factor from conductance to water to conductance to heat.\nM_H20: H2O molar mass (kg mol^-1)\n\nValues are partly burrowed from bigleaf::bigleaf.constants()\n\nReferences\n\nAllen, R. G., et al. (1998). \"Crop evapotranspiration-Guidelines for computing crop water requirements-FAO Irrigation and drainage paper 56.\"  300(9): D05109.\nFoken, T, 2008: Micrometeorology. Springer, Berlin, Germany.\nKhorasanizadeh, H. and K. Mohammadi (2016). \"Diffuse solar radiation on a horizontal surface: Reviewing and categorizing the empirical models.\" Renewable and Sustainable Energy Reviews 53: 338-362.\n\n\n\n\n\n","category":"type"},{"location":"#DynACof.site","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.site","text":"Parameter structures\n\nThose structures are used to make the parameter inputs to DynACof. Default values are provided to the user (the struct are Base.@kwdef). They are mainly used under the hood from [Import_Parameters()], but can still be called by the user for conveniance (but not needed  for a model run). The Parameters are divided into five structures: constants, site, soil, coffee, and tree.\n\nsite:\n\nThe site structure. The default values comes from a stand from the Aquiares farm located in Costa Rica. It is a Coffea arabica plantation in agroforestry management under Erythrina poeppigiana shade trees. The plot is visible at this address, and a full desciption is available here and here.\n\nconstants\n\nSee constants.\n\nsoil\n\nThe soil structure.\n\ncoffee\n\nThe coffee structure. The default values comes from a high density plantation (5580 coffee plants per hectares) of Coffea arabica var. Caturra pruned every year to sustain the production on three resprouts per stump in average (see same references than site).\n\ntree\n\nThe shade tree structure. The default values come from Erythrina poeppigiana shade trees from Aquiares. They were planted at high density  (250 trees ha-1) pruned to optimize light transmitted to the Coffea, and were thinned in 2000 to a low density of ~7.4 trees ha-1. Starting from 2000, these trees made a relatively large crown with an average height of 26 m in 2018 on this site.  NB: the tree parameter structure is optional, and not needed for monospecific coffee plantations.\n\nReturn\n\nAn instance of a structure with Parameters needed for a DynACof simulation.\n\nDetails\n\nThe values of the instance can be read from files using import_parameters. In that case, the user  can provide only the parameter values that need to be changed, and all others will be taken as the default values. Example files are provided in a specific Github repository here.\n\n\n\n\n\n","category":"type"},{"location":"#DynACof.soil","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.soil","text":"Parameter structures\n\nThose structures are used to make the parameter inputs to DynACof. Default values are provided to the user (the struct are Base.@kwdef). They are mainly used under the hood from [Import_Parameters()], but can still be called by the user for conveniance (but not needed  for a model run). The Parameters are divided into five structures: constants, site, soil, coffee, and tree.\n\nsite:\n\nThe site structure. The default values comes from a stand from the Aquiares farm located in Costa Rica. It is a Coffea arabica plantation in agroforestry management under Erythrina poeppigiana shade trees. The plot is visible at this address, and a full desciption is available here and here.\n\nconstants\n\nSee constants.\n\nsoil\n\nThe soil structure.\n\ncoffee\n\nThe coffee structure. The default values comes from a high density plantation (5580 coffee plants per hectares) of Coffea arabica var. Caturra pruned every year to sustain the production on three resprouts per stump in average (see same references than site).\n\ntree\n\nThe shade tree structure. The default values come from Erythrina poeppigiana shade trees from Aquiares. They were planted at high density  (250 trees ha-1) pruned to optimize light transmitted to the Coffea, and were thinned in 2000 to a low density of ~7.4 trees ha-1. Starting from 2000, these trees made a relatively large crown with an average height of 26 m in 2018 on this site.  NB: the tree parameter structure is optional, and not needed for monospecific coffee plantations.\n\nReturn\n\nAn instance of a structure with Parameters needed for a DynACof simulation.\n\nDetails\n\nThe values of the instance can be read from files using import_parameters. In that case, the user  can provide only the parameter values that need to be changed, and all others will be taken as the default values. Example files are provided in a specific Github repository here.\n\n\n\n\n\n","category":"type"},{"location":"#DynACof.tree","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.tree","text":"Parameter structures\n\nThose structures are used to make the parameter inputs to DynACof. Default values are provided to the user (the struct are Base.@kwdef). They are mainly used under the hood from [Import_Parameters()], but can still be called by the user for conveniance (but not needed  for a model run). The Parameters are divided into five structures: constants, site, soil, coffee, and tree.\n\nsite:\n\nThe site structure. The default values comes from a stand from the Aquiares farm located in Costa Rica. It is a Coffea arabica plantation in agroforestry management under Erythrina poeppigiana shade trees. The plot is visible at this address, and a full desciption is available here and here.\n\nconstants\n\nSee constants.\n\nsoil\n\nThe soil structure.\n\ncoffee\n\nThe coffee structure. The default values comes from a high density plantation (5580 coffee plants per hectares) of Coffea arabica var. Caturra pruned every year to sustain the production on three resprouts per stump in average (see same references than site).\n\ntree\n\nThe shade tree structure. The default values come from Erythrina poeppigiana shade trees from Aquiares. They were planted at high density  (250 trees ha-1) pruned to optimize light transmitted to the Coffea, and were thinned in 2000 to a low density of ~7.4 trees ha-1. Starting from 2000, these trees made a relatively large crown with an average height of 26 m in 2018 on this site.  NB: the tree parameter structure is optional, and not needed for monospecific coffee plantations.\n\nReturn\n\nAn instance of a structure with Parameters needed for a DynACof simulation.\n\nDetails\n\nThe values of the instance can be read from files using import_parameters. In that case, the user  can provide only the parameter values that need to be changed, and all others will be taken as the default values. Example files are provided in a specific Github repository here.\n\n\n\n\n\n","category":"type"},{"location":"#DynACof.ALS-Tuple{}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.ALS","text":"American Leaf Spot\n\nCompute the percentage of Coffea leaves dying from American Leaf Spot disease, drought excluded.  The function needs at least a year of data at daily time-step. \n\nArguments\n\nElevation::Float64:           Site elevation       (m.a.s.l)\ndf_rain::DataFrame            Data frame with DOY, year and Rain (mm) values at daily time-step, with a whole year (or more) of data\nSlopeAzimut::Float64:         Slope azimuth        (degree)\nSlope::Float64:               Slope percentage     (%)\nRowDistance::Float64:         Coffee rows distance (m)\nShade::Float64:               Shade percentage     (%)\nheight_coffee::Float64: Coffee Height        (m)\nFertilization::Int64:       N fertilization per year\nShadeType::Int64:             Shade type:\n1: Legume only\n2: Bananas and legume\n3: Bananas and other plants\n4: Fruit and forest trees only\n5: No shade (Full sun)\nCoffeePruning::String         Character specifying the pruning management. Values: \"tree\", \"row\", \"block\" or \"\" (empty String, no pruning).\n\nNote\n\nAll arguments are named. It is good practice to use shade tree transmittance to compute \"Shade\" percentage (Shade= 1-Transmittance).\n\nReturn\n\nALS: Percentage of dead leaves by ALS by day (% day-1)\n\nReferences\n\nAvelino et al. (2007) Topography and Crop Management Are Key Factors for the Development of American Leaf Spot Epidemics on Coffee in Costa Rica. File: \"Iadigitized from Avelino 2007 - JAlineaire.xlsx\"\n\nExamples\n\nusing DataFrames\n# Making df_rain :\ndf_rain= DataFrame(DOY= 1:365, year= fill(2018,365), Rain= rand(0:0.1:5, 365))\nALS(Elevation = 1000, df_rain= df_rain)\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.CN-Tuple{Any}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.CN","text":"Temperature-dependent correction coefficient for nodes (CN)\n\nComputes the temperature-dependent correction coefficient for green nodes in the coffee plant according to Drinnan and Menzel (1995).\n\nArguments\n\nTair::Float64 The average air temperature during the vegetative growing period\n\nReturn\n\nThe correction coefficient to compute the number of green nodes in the coffee (see Eq. 26 from Vezy et al. (in prep.))\n\nReferences\n\nDrinnan, J. and C. Menzel, Temperature affects vegetative growth and flowering of coffee (Coffea arabica L.). \n\nJournal of Horticultural Science, 1995. 70(1): p. 25-34.\n\nExamples\n\nCN(25.0)\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.ET_to_LE","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.ET_to_LE","text":"Conversion between Latent Heat Flux and Evapotranspiration\n\nDescription\n\nConverts evaporative water flux from mass (ET, evapotranspiration) to energy (LE, latent heat flux) units, or vice versa.\n\nArguments\n\nLE::Float64: Latent heat flux (W m-2)\nET::Float64: Evapotranspiration (kg m-2 s-1)\nTair::Float64: Air temperature (deg C)\n\nDetails\n\nThe conversions are given by:\n\nET = LE/λ\nLE = λ ⋅ ET\n\nwhere λ is the latent heat of vaporization (J kg-1) as calculated by latent_heat_vaporization.\n\nReferences\n\nThese functions are adapted from the code of bigleaf::LE.to.ET\n\nExamples\n\n# LE of 200 Wm-2 and air temperature of 25degC\nLE_to_ET(200.0,25.0)\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.GDD-Tuple{Float64,Float64,Float64}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.GDD","text":"GDD(30.0,27.0,5.0)\n\nCompute the daily growing degree days (GDD) using the maximum and minimum daily temperature.\n\nArguments\n\nTmax::Float64: Maximum daily temperature (Celsius degree)\nTmin::Float64: Minimum daily temperature (Celsius degree)\nMinTT::Float64: Minimum temperature threshold, also called base temperature (Celsius degree), default to 5.\n\nPlease keep in mind that this function gives an approximation of the degree days. GDD are normally computed as the integral of hourly (or less) values.\n\nReturn\n\nGDD: Growing degree days (Celsius degree)\n\nExamples\n\nGDD(30.0,27.0,5.0)\n23.5\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.GDD-Tuple{Float64,Float64}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.GDD","text":"GDD(25.,5.0)\n\nCompute the daily growing degree days (GDD) directly from the daily mean temperature.\n\nArguments\n\nTmean::Float64: Average daily temperature (Celsius degree).\nMinTT::Float64: Minimum temperature threshold, also called base temperature (Celsius degree), default to 5.\n\nReturn\n\nGDD: Growing degree days (Celsius degree)\n\nExamples\n\nGDD(25.0,5.0)\n20.0\nGDD(5.0,5.0)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.G_bulk-Tuple{}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.G_bulk","text":"Bulk aerodynamic conductance\n\nCompute the aerodynamic conductance for sensible and latent heat above the canopy following Van de Griend and Van Boxel (1989).\n\nArguments\n\nWind::Float64:      Average daily wind speed above canopy (m s-1)\nLAI::Float64:       Leaf area index of the upper layer (m2 leaf m-2 soil)\nZHT::Float64:       Wind measurement height (m)\nZ_top::Float64:     Average canopy height of the taller crop (m)\nZ0::Float64:        Roughness length (m). Default: 0.1 ⋅ Z_top\nZPD::Float64:       Zero-plane displacement (m), Default: 0.75*Z_top\nα::Float64:         Alpha, the constant for diffusivity at top canopy. Default: 1.5 following                Van de Griend et al (1989).\nZW::Float64:        Top height of the roughness sublayer (m). Default: ZPD + α ⋅ (Z_top - ZPD)\nextwind::Float64:   Extinction coefficient. Default: 0, no extinction.\nvonkarman::Float64: Von Karman constant, default to constants().vonkarman, 0.41.\nverbose::Bool:      Print information of test_ZHT\n\nDetails\n\nAll arguments are named. α can also be computed as: α=\\frac{zw-d}{Z_{top}-d}   The bulk aerodynamic conductance ga_{bulk} is computed as follow: ga_{bulk}=\\frac{1}{r1+r2+r3}   where r1, r2 and r3 are the aerodynamic resistances of the inertial sublayer, the roughness sublayer and the top layer of the canopy respectively.  Because wind speed measurements are more often made directly in the roughness sublayer, the resistance in the inertial  sublayer r1 is set to 0 though. r2 and r3 are computed using the equation 43 of Van de Griend and Van Boxel (refer to the web version of the help file for Latex rendering): r2=\\int_{zh}^{zw}\\frac{1}{K''} with K''= kU_*(z_w-d) And: r3=\\int_{(z2+z1)/2}^{zh}\\frac{1}{K'''}\\mathrm{d}z with K'''= U_z\\frac{K_h}{U_h} Integration of r2 and r3 equations give: \\frac{(\\ln(ZPD-ZW)^2-\\ln(ZPD-Z2)^2)}{(2kU_*)} simplified in: r2= \\frac{1}{kU_*}\\ln(\\frac{ZPD-ZW}{ZPD-Z2}) and finaly:  r3= \\frac{Uh}{Kh}\\ln(\\frac{Uh}{U_{interlayer}})\n\nReturn\n\nG_bulk: The bulk aerodynamic conductance (m s-1)\n\nReferences\n\nVan de Griend, A.A. and J.H. Van Boxel, Water and surface energy balance model with a multilayer canopy representation for  remote sensing purposes. Water Resources Research, 1989. 25(5): p. 949-971.\n\nSee also\n\nG_interlay and GetWind, which is used internaly.\n\nExamples\n\n# The bulk aerodynamic conductance for a coffee plantation managed in agroforestry system:\nG_bulk(Wind=3.0,ZHT=25.0,Z_top=24.0,LAI = 0.5,extwind = 0.58)\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.G_interlay-Tuple{}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.G_interlay","text":"Canopy layer to canopy layer aerodynamic conductance\n\nCompute the aerodynamic conductance for sensible and latent heat between canopy layers following Van de Griend and Van Boxel (1989).\n\nArguments\n\nWind::Float64:      Average daily wind speed above canopy (m s-1)\nLAI_top::Float64:   Leaf area index of the upper layer (m2 leaf m-2 soil).\nLAI_bot::Float64:   Leaf area index of the layer below the upper layer (m2 leaf m-2 soil).\nZHT::Float64:       Wind measurement height (m)\nZ_top::Float64:     Average canopy height of the taller crop (m)\nZ0::Float64:        Roughness length (m). Default: 0.1*Z_top\nZPD::Float64:       Zero-plane displacement (m), Default: 0.75*Z_top\nα::Float64:         Alpha, the constant for diffusivity at top canopy. Default: 1.5 following Van de Griend et al (1989).\nZW::Float64:        Top height of the roughness sublayer (m). Default: ZPD+α*(Z_top-ZPD)\nextwind::Float64:   Extinction coefficient. Default: 0, no extinction.\nvonkarman::Float64: Von Karman constant, default to constants().vonkarman, 0.41.\nverbose::Bool:      Print information of test_ZHT\n\nAll arguments are named. \n\nDetails\n\nα can also be computed as: α=\\frac{zw-d}{Z_{top}-d}   The aerodynamic conductance between canopy layers is computed as: g_{af}= \\frac{1}{\\frac{U_h}{K_h}\\ln(U_{mid}/U_{inter})} where usually U_{mid} is the wind speed at (median) cumulated LAI between the top and the soil, and U_{inter} the wind speed at the height between the two canopy layers. In this function, U_{mid} and U_{inter} are computed relative to the leaf area instead of the height of the vegetation layers.\n\nReturn\n\ng_af: The aerodynamic conductance of the air between two canopy layers (m s-1)\n\nReferences\n\nVan de Griend, A.A. and J.H. Van Boxel, Water and surface energy balance model with a multilayer canopy representation for remote  sensing purposes. Water Resources Research, 1989. 25(5): p. 949-971.\n\nSee also\n\nG_bulk and GetWind, which is used internaly.\n\nExamples\n\n# G_af for a coffee plantation managed in agroforestry system:\nG_interlay(Wind = 3,ZHT = 25,Z_top = 2,LAI_top = 0.5,LAI_bot = 4)\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.G_soilcan-Tuple{}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.G_soilcan","text":"Canopy to soil aerodynamic conductance\n\nCompute the aerodynamic conductance for sensible and latent heat between the center of the lowest canopy layer and the soil surface following Van de Griend and Van Boxel (1989).\n\nArguments\n\nWind::Float64:      Average daily wind speed above canopy (m s-1)\nLAI::Float64:       Total leaf area index above the soil (m2 leaf m-2 soil).\nZHT::Float64:       Wind measurement height (m)\nZ_top::Float64:     Average canopy height of the taller crop (m)\nZ0::Float64:        Roughness length (m). Default: 0.1*Z_top\nZPD::Float64:       Zero-plane displacement (m), Default: 0.75*Z_top\nα::Float64:         Alpha, the constant for diffusivity at top canopy. Default: 1.5 following Van de Griend et al (1989).\nZW::Float64:        Top height of the roughness sublayer (m). Default: ZPD + α ⋅ (Z_top - ZPD)\nextwind::Float64:   Extinction coefficient. Default: 0.0, no extinction.\nvonkarman::Float64: Von Karman constant, default to constants().vonkarman, 0.41.\nverbose::Bool:      Print information of test_ZHT\n\nAll arguments are named.\n\nDetails\n\nα can also be computed as: α=\\frac{zw-d}{Z_{top}-d}   The aerodynamic conductance between the lowest canopy layer and the soil is computed as: g_{a0}= \\frac{1}{\\frac{U_h}{K_h}\\ln(U_{mid}/U_{0})} where U_{mid} is the wind speed at median cumulated LAI between the top and the soil, and U_0 the wind speed at soil surface.\n\nReturn\n\ng_a0: The aerodynamic conductance of the air between the lowest canopy layer and the soil surface (m s-1)}\n\nReferences\n\nVan de Griend, A.A. and J.H. Van Boxel, Water and surface energy balance model with a multilayer canopy representation for remote  sensing purposes. Water Resources Research, 1989. 25(5): p. 949-971.\n\nSee also\n\nG_bulk and GetWind, which is used internaly.\n\nExamples\n\n# G_a0 for a coffee plantation managed in agroforestry system:\nG_soilcan(Wind= 1.0, ZHT= 25.0, Z_top= 24.0,LAI= 4.5, extwind= 0.58)\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.Gb_h-Tuple{}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.Gb_h","text":"Leaf boundary layer conductance for heat.\n\nCompute the bulk leaf boundary layer conductance for heat using the wind speed, the leaf dimension, and leaf area distribution following Jones (1992).\n\nArguments\n\nWind::Float64:        Average daily wind speed above canopy (m s-1)\nwleaf::Float64:       Average leaf width (m)\nLAI_lay::Float64:     Leaf area index of the layer (m2 leaves m-2 soil)\nLAI_abv::Float64:     Cumulated leaf area index above the layer (m2 leaves m-2 soil)\nextwind::Float64:     Extinction coefficient. Default: 0, no extinction.\nZ_top::Float64:       Average canopy height of the taller crop (m)\nZHT::Float64:         Wind measurement height (m)\nZ0::Float64:          Roughness length (m). Default: 0.1 ⋅ Z_top\nZPD::Float64:         Zero-plane displacement (m), Default: 0.75 ⋅ Z_top\nα::Float64:           Alpha, the constant for diffusivity at top canopy. Default: 1.5 following Van de Griend et al (1989).\nZW::Float64:          Top height of the roughness sublayer (m). Default: ZPD + α ⋅ (Z_top - ZPD)\n\nDetails\n\nThe leaf boundary layer conductance for heat can be transformed into leaf boundary layer conductance for water vapour as follow: Gb_w= 1.075*gb_h   Note that Gb_w should be doubled for amphistomatous plants (stomata on both sides of the leaves).\n\nReturn\n\nGb: The leaf boundary layer conductance for heat (m s-1)\n\nReferences\n\nMahat, V., D.G. Tarboton, and N.P. Molotch, Testing above‐ and below‐canopy represetations of turbulent fluxes in an \n\nenergy balance snowmelt model. Water Resources Research, 2013. 49(2): p. 1107-1122.\n\nSee also\n\nG_bulk, G_soilcan, G_interlay and GetWind, which is used internaly.\n\nExamples\n\n# Gb for a coffee plantation managed in agroforestry system:\nGb_h(Wind=3.0,wleaf=0.068,LAI_lay=4.0,LAI_abv=0.5,ZHT=25.0,Z_top=24.0,extwind=0.58)\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.GetWind-Tuple{}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.GetWind","text":"Get the average wind speed at center of canopy layer by computing the wind speed decrease in two steps:\n\nDecrease the measured wind speed from measurement height until top of the canopy using the formula of\n\nVan de Griend and Van Boxel (1989)\n\nDecrease wind speed further with increasing canopy depth using an exponential extinction coefficient and a\n\ncumulated LAI above the target point.\n\nArguments\n\nWind::Float64:      Above canopy wind speed (m s-1)\nLAI_lay::Float64:   Leaf area index of the layer (m2 leaves m-2 soil)\nLAI_abv::Float64:   Cumulated leaf area index above the layer (m2 leaves m-2 soil)\nextwind::Float64:   Extinction coefficient. Default: 0, no extinction.\nZ_top::Float64:     Average canopy height of the taller crop (m)\nZHT::Float64:       Wind measurement height (m)\nZ0::Float64:        Roughness length (m). Default: 0.1 ⋅ Z_top\nZPD::Float64:       Zero-plane displacement (m), Default: 0.75 ⋅ Z_top\nα::Float64:         Alpha, the constant for diffusivity at top canopy. Default: 1.5 following Van de Griend et al (1989).\nZW::Float64:        Top height of the roughness sublayer (m). Default: ZPD + α ⋅ (Z2 - ZPD)\nvonkarman::Float64: Von Karman constant, default to constants().vonkarman, 0.41.\nverbose::Bool:      Print information of test_ZHT\n\nDetails\n\nThe function computes the average wind speed at the center of the canopy layer. It is considered that the leaf distibution is homogeneous in the layer, so the LAI_lay parameter is used to add half of the target layer to the cumulated LAI above: WindLay=Wh*e^{^{\\left(-extwind*\\left(LAI_{abv}+\\frac{LAI_{lay}}{2}\\right)\\right)}} with Wh the wind speed at top of the canopy. Note: the α parameter can also be computed as: α=\\frac{zw-d}{Z2-d}\n\nReturn\n\nWindLay: The winspeed at the center of the layer (m s-1)\n\nReferences\n\nVan de Griend, A.A. and J.H. Van Boxel, Water and surface energy balance model with a multilayer canopy representation  for remote sensing purposes. Water Resources Research, 1989. 25(5): p. 949-971.\n\nPart of the code is taken from the MAESPA model.\n\nExamples\n\n# Windspeed in a coffee layer managed in agroforestry system\nGetWind(Wind=3.0,LAI_lay=4.0,LAI_abv=0.3,extwind= 0.58,Z_top = 24.0,ZHT = 25.0)\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.LE_to_ET","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.LE_to_ET","text":"Conversion between Latent Heat Flux and Evapotranspiration\n\nDescription\n\nConverts evaporative water flux from mass (ET, evapotranspiration) to energy (LE, latent heat flux) units, or vice versa.\n\nArguments\n\nLE::Float64: Latent heat flux (W m-2)\nET::Float64: Evapotranspiration (kg m-2 s-1)\nTair::Float64: Air temperature (deg C)\n\nDetails\n\nThe conversions are given by:\n\nET = LE/λ\nLE = λ ⋅ ET\n\nwhere λ is the latent heat of vaporization (J kg-1) as calculated by latent_heat_vaporization.\n\nReferences\n\nThese functions are adapted from the code of bigleaf::LE.to.ET\n\nExamples\n\n# LE of 200 Wm-2 and air temperature of 25degC\nLE_to_ET(200.0,25.0)\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.PENMON-Tuple{}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.PENMON","text":"PENMON(;Rn,Wind,Tair,ZHT,Z_top,Pressure,Gs,VPD,LAI,extwind=0,wleaf=0.068,Parameters= constants())\n\nEvapotranspiration\n\nCompute the daily evaporation or transpiration of the surface using the Penman-Monteith equation.\n\nArguments\n\nRn::Float64:          Net radiation (MJ m-2 d-1)\nWind::Float64:        Wind speed (m s-1)\nTair::Float64:        Air temperature (Celsius degree)\nZHT::Float64:         Wind measurement height (m)\nZ_top::Float64:       Canopy top height (m)\nPressure::Float64:    Atmospheric pressure (hPa)\nGs::Float64:          Stomatal conductance (mol m-2 s-1)\nVPD::Float64:         Vapor pressure deficit (kPa)\nLAI::Float64:         Leaf area index of the upper layer (m2 leaf m-2 soil)\nextwind::Float64:     Extinction coefficient. Default: 0, no extinction.\nwleaf::Float64:       Average leaf width (m)\nParameters:  Constant parameters, default to constants, if different values are needed, simply make a named tuple with:\ncp: specific heat of air for constant pressure (J K-1 kg-1)\nRgas: universal gas constant (J mol-1 K-1)\nKelvin: conversion degree Celsius to Kelvin\nH2OMW: conversion from kg to mol for H2O (kg mol-1)\nGBVGBH: conversion from water conductance to heat conductance\n\nAll arguments are named. \n\nDetails\n\nThe daily evapotranspiration is computed using the Penman-Monteith equation, and a set of conductances as : ET=\\frac{Δ\\cdot Rn\\cdot10^6+ρ\\cdot cp\\cdot\\frac{VPD}{10\\ }\\cdot GH}{\\ Δ +\\frac{\\gamma}{λ\\ }\\cdot(1+\\frac{GH}{GV})}\\ } where Δ is the slope of the saturation vapor pressure curve (kPa K-1), ρ is the air density (kg m-3), GH the canopy boundary layer conductance (m s-1), γ the psychrometric constant (kPa K-1) and GV the boundary + stomatal conductance to water vapour (m s-1). To simulate evaporation, the input stomatal conductance Gs can be set to nearly infinite (e.g. Gs= 1\\cdot e^9).\n\n@note If wind=0, it is replaced by a low value of 0.01\n\nReturn\n\nET, the daily (evapo|transpi)ration (mm d-1)\n\nReferences\n\nAllen R.G., Pereira L.S., Raes D., Smith M., 1998: Crop evapotranspiration - Guidelines for computing crop water requirements - FAO Irrigation and drainage paper 56.\n\nSee also\n\nbigleaf::potential.ET and the MAESPA model\n\nExamples\n\n# leaf evaporation of a forest :\nPENMON(Rn= 12.0, Wind= 0.5, Tair= 16.0, ZHT= 26.0, Z_top= 25.0, Pressure= 900.0, Gs = 1E09, VPD= 2.41,\n       LAI=3.0, extwind= 0.58, wleaf=0.068)\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.Rad_ext","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.Rad_ext","text":"Rad_ext(1000.0, 25.0, 1.5)\n\nComputes the virtual temperature, i.e. the temperature at which dry air would have the same density as moist air at its actual temperature.\n\nArguments\n\nDOY::Int64: Ordinal date (integer): day of year from 1st January (day)\nLatitude::Float64: Latitude (deg)\nGsc::Float64: The solar constant (W m-2), default to constants().Gsc (= 1367).\n\nReturns\n\nS0, the daily extra-terrestrial radiation (MJ m^-2 d^-1)\n\nReferences\n\nKhorasanizadeh, H. and K. Mohammadi, Diffuse solar radiation on a horizontal surface: Reviewing and categorizing the empirical models. Renewable and Sustainable Energy Reviews,\n\n53: p. 338-362.\n\nExamples\n\n# Daily extra-terrestrial radiation on january 1st at latitude 35 N :\nRad_ext(1,35.0)\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.Rad_net","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.Rad_net","text":"Rad_net(DOY::Int64,RAD::Float64,Tmax::Float64,Tmin::Float64,VPD::Float64,Latitude::Float64,\n Elevation::Float64,albedo::Float64,formula::String;\n σ::Float64= constants().σ, Gsc::Float64= constants().Gsc)\n\nCompute the daily net radiation of the system using incident radiation, air temperature, wind speed, relative humidity and the albedo. A clear description of this methodology can be found in Allen et al. (1998) or in An et al. (2017).\n\nArguments\n\nDOY::Int64: Ordinal day, which is the day of year from 1st January (day)\nRAD::Float64: Incident total radiation (MJ m-2 d-1)- Tmax::Float64: Maximum daily air temperature (°C)\nTmin::Float64: Minimum daily air temperature (°C)\nVPD::Float64: Vapor pressure deficit (kPa)\nLatitude::Float64: Latitude (°)\nElevation::Float64: Elevation (m)\nalbedo::Float64: Shortwave surface albedo (-)\nformula::String: (optional) Formula to be used for the calculation of esat. One of \"Sonntag_1990\" (Default),\n\n\"Alduchov1996\", or \"Allen1998\".\n\nσ::Float64: (sigma) Stefan-Boltzmann constant (W m^-2 K^-4), default to constants().σ.\nGsc::Float64: The solar constant (W m-2), default to constants().Gsc (= 1367).\n\nReturns\n\nRn, the daily net radiation (MJ m-2 d-1)\n\nDetails\n\nThe daily net radiation is computed using the surface albedo. This method is only a simple estimation. Several parameters  (ac, bc, a1 and b1) are taken from Evett et al. (2011). The net radiation is computed as:  Rn=(1-alpha)cdot RAD-(accdotfracRADRso+bc)cdot(a1+b1cdot ea^05)cdotsigmacdotfracT_max^4+T_min^42 And is derived from the equation : Rn= (1-alpha)cdot RAD-Rln where \\eqn{Rln} is the net upward longwave radiation flux, \\eqn{\\alpha} is the albedo, \\eqn{R{so}} the daily total clear sky solar irradiance, computed as follow: ``R{so}= (0.75+0.00002\\cdot Elevation)\\cdot R{sa}whereR{sa}`is the daily extra-terrestrial radiation, computed using [Radext](@ref). The actual vapor pressureea` can be computed using either VPD or the relative humidity and the maximum and minimum daily temperature. If both are provided, Rh will be used.\n\nReferences\n\nAn, N., S. Hemmati, and Y.-J. Cui, Assessment of the methods for determining net radiation at different time-scales of meteorological variables. Journal of Rock Mechanics and Geotechnical Engineering, 2017. 9(2): p. 239-246.\n\nExamples\n\ndew_point(20.0,1.0)\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.Sucrose_cont_perc-NTuple{5,Any}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.Sucrose_cont_perc","text":"Fruit sucrose accumulation\n\nComputes a the sucrose accumulation into coffee fruits through time following a logistic curve\n\nArguments\n\nx::Float64:  Cumulated degree days\na::Float64:  Parameter\nb::Float64:  Parameter\nx0::Float64: Mid-maturation (logistic function inflexion point)\ny0::Float64: Sucrose content at the beginning (in %, 1-100)\n\nReturn\n\nThe sucrose content, in % of fruit total dry mass.\n\nReferences\n\nPezzopane, J., et al., Agrometeorological parameters for prediction of the maturation period of Arabica coffee cultivars.  International Journal of Biometeorology, 2012. 56(5): p. 843-851.\n\nExamples\n\nSucrose_cont_perc(1:10,5.3207,-28.5561,191,3.5)\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.VPD_to_e","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.VPD_to_e","text":"VPD_to_e(1.5, 25.0, \"Sonntag_1990\")\n\nComputes the vapor pressure (e) from the vapor pressure deficit (VPD) and the air temperature (Tair)\n\nArguments\n\nVPD::Float64: Vapor pressure deficit (kPa)\nTair::Float64: Air temperature (°C)\nformula::String: (optional) Formula to be used for the calculation of esat. One of \"Sonntag_1990\" (Default),\n\n\"Alduchov1996\", or \"Allen1998\".\n\nReturns\n\ne, the vapor pressure (kPa)\n\nExamples\n\nVPD_to_e(1.5, 25.0, \"Sonntag_1990\")\n\nReference\n\nThis function is translated from the R package bigleaf.\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.acos°","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.acos°","text":"Trigonometric Functions (degree)\n\nThese functions give the obvious trigonometric functions. They respectively compute the cosine, sine, tangent, arc-cosine, arc-sine, arc-tangent with input and output in degree.\n\nReturns\n\nThe output in degree\n\nDetails\n\nThe conversions between radian to degree is: \n\nx cdot fracpi180\n\nExamples\n\n# cosinus of an angle of 120 degree:\ncos°(120)\n# should yield -0.5, as in the base version:\ncos(120*π/180)\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.air_density","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.air_density","text":"Air Density (ρ)\n\nComputes the air density of moist air from air temperature and pressure.\n\nArguments\n\nTair::Float64: Air temperature (deg C)\npressure::Float64: Atmospheric pressure (kPa)\nParameters:  Constant parameters, default to constants, if different values are needed, simply make a named tuple with:\nKelvin: conversion degC to Kelvin \nRd: gas constant of dry air (J kg-1 K-1) \n\nDetails\n\nAir density (ρ) is calculated as: ρ = pressure / (Rd * Tair)\n\nReturn\n\nρ: the air density (kg m-3)\n\nReferences\n\nThis function is adapted from the code of bigleaf::air.density\n\nFoken, T, 2008: Micrometeorology. Springer, Berlin, Germany.\n\nExamples\n\n# air density at 25degC and standard pressure (101.325kPa)\nair_density(25.0,101.325)\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.asin°","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.asin°","text":"Trigonometric Functions (degree)\n\nThese functions give the obvious trigonometric functions. They respectively compute the cosine, sine, tangent, arc-cosine, arc-sine, arc-tangent with input and output in degree.\n\nReturns\n\nThe output in degree\n\nDetails\n\nThe conversions between radian to degree is: \n\nx cdot fracpi180\n\nExamples\n\n# cosinus of an angle of 120 degree:\ncos°(120)\n# should yield -0.5, as in the base version:\ncos(120*π/180)\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.atan°","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.atan°","text":"Trigonometric Functions (degree)\n\nThese functions give the obvious trigonometric functions. They respectively compute the cosine, sine, tangent, arc-cosine, arc-sine, arc-tangent with input and output in degree.\n\nReturns\n\nThe output in degree\n\nDetails\n\nThe conversions between radian to degree is: \n\nx cdot fracpi180\n\nExamples\n\n# cosinus of an angle of 120 degree:\ncos°(120)\n# should yield -0.5, as in the base version:\ncos(120*π/180)\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.balance_model!-NTuple{4,Any}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.balance_model!","text":"Energy balance\n\nComputes the different components of the energy balance considering the shade tree, the coffee and the soil.\n\nReturn\n\nNothing, modify the DataFrame of simulation Sim in place. See dynacof for more details.\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.bud_init_period!-Tuple{DataFrames.DataFrame,DataFrames.DataFrame,Any}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.bud_init_period!","text":"Bud induction window computation\n\nBud induction can start only at FTffb degree-days after vegetative growth stops (Rodriguez et al., 2011).  The following function finds the vegetative growth end day, and add the FTffb parameter (Time of first floral buds, in dd), then find the very first flowering of the year and set the vector BudInitPeriod to TRUE between the two dates. So buds will appear between plant F_Tffb parameter and the first flowering day only.\n\nReturn\n\nNothing, modify the DataFrame of simulation Sim in place. See dynacof for more details.\n\nReferences\n\nRodríguez, D., Cure, J., Cotes, J., Gutierrez, A. and Cantor, F., 2011. A coffee agroecosystem model: I. Growth and development of the coffee plant. Ecological Modelling, 222(19): 3626-3639.\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.coffee_model!-NTuple{4,Any}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.coffee_model!","text":"Coffee crop model\n\nComputes the coffee crop growth and yield. This function is called from dynacof and should not be called by the user.\n\nReturn\n\nNothing, modify the DataFrame of simulation Sim in place. See dynacof for more details.\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.cos°","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.cos°","text":"Trigonometric Functions (degree)\n\nThese functions give the obvious trigonometric functions. They respectively compute the cosine, sine, tangent, arc-cosine, arc-sine, arc-tangent with input and output in degree.\n\nReturns\n\nThe output in degree\n\nDetails\n\nThe conversions between radian to degree is: \n\nx cdot fracpi180\n\nExamples\n\n# cosinus of an angle of 120 degree:\ncos°(120)\n# should yield -0.5, as in the base version:\ncos(120*π/180)\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.days_without_rain-Tuple{Array{Float64,1}}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.days_without_rain","text":"days_without_rain(Rain::Array{Float64,1})\n\nComputes the number of days without rain from a rainfall data Array. It is assumed the Array is sorted following ascending dates.\n\nArguments\n\nRain::Array{Float64,1}: An Array of daily rainfall data (whatever the unit) in ascending day order.\n\nReturns\n\nAn Array{Int64,1} determining how many days there was without rainfall before the given day.\n\nExamples\n\nrainfall= [0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.2,0.6]\ndays_without_rain(rainfall)\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.dew_point","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.dew_point","text":"dew_point(Tair::Float64, VPD::Float64, formula::String=\"Sonntag_1990\")\n\nComputes the dew point, i.e. the temperature to which air must be cooled to become saturated \n\nArguments\n\nTair::Float64: Air temperature (°C)\nVPD::Float64: Vapor pressure deficit (kPa)\nformula::String: (optional) Formula to be used for the calculation of esat. One of \"Sonntag_1990\" (Default),\n\n\"Alduchov1996\", or \"Allen1998\".\n\nReturns\n\nT_d, the dew point (°C)\n\nExamples\n\ndew_point(20.0,1.0)\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.diffuse_fraction","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.diffuse_fraction","text":"diffuse_fraction(DOY::Int64, RAD::Float64, Latitude::Float64; formula::String=\"Spitters\",Gsc::Float64=constants().Gsc)\n\nComputes the daily diffuse fraction from the total daily incident radiation\n\nArguments\n\nDOY::Int64: Day Of Year from 1st January (day)\nRAD::Float64: Incident total radiation (MJ m-2 d-1)\nLatitude::Float64: Latitude (deg)\nformula::String: (Optionnal) Model type, one of Spitters, Page or Gopinathan\nGsc::Float64: (Optionnal) The solar constant (W m-2), default to constants().Gsc (= 1367).\n\nDetails\n\nThe daily extra-terrestrial radiation at a plane parallel to the earth surface (S0 or H0 depending on the source) is computed following Khorasanizadeh and Mohammadi (2016). The daily diffuse fraction is computed following DB models from :\n\nSpitters et al. (1986): used in de Bilt in Netherlands, stated that their model is \n\nvalid for a wide range of climate conditions  \n\nPage (1967) using the data from 10 widely-spread sites in the 40N to 40S latitude belt  \nGopinathan and Soler (1995) from 40 widely distributed locations in the latitude range of 36S to 60N.  \n\nNote\n\nC_to_K and epsi can be found using constants()\n\nReturns\n\nHdH: the daily diffuse fraction of light (%)\n\nReferences\n\nDuffie, J.A. and W.A. Beckman, Solar engineering of thermal processes. 2013: John Wiley & Sons.\n\nGopinathan, K. and A. Soler, Diffuse radiation models and monthly-average, daily, diffuse data for a wide latitude range. Energy, 1995. 20(7): p. 657-667.  \n\nKalogirou, S.A., Solar energy engineering: processes and systems. 2013: Academic Press.\n\nKhorasanizadeh, H. and K. Mohammadi, Diffuse solar radiation on a horizontal surface: Reviewing and categorizing the empirical models. Renewable and Sustainable Energy Reviews,\n\n53: p. 338-362.  \n\nLiu, B.Y.H. and R.C. Jordan, The interrelationship and characteristic distribution of direct,\n\ndiffuse and total solar radiation. Solar Energy, 1960. 4(3): p. 1-19.  \n\nPage, J. The estimation of monthly mean values of daily total short wave radiation on vertical\n\nand inclined surfaces from sunshine records 40S-40N. in Proceedings of the United Nations Conference on New Sources of Energy: Solar Energy, Wind Power and Geothermal Energy, Rome, Italy. 1967.  \n\nSpitters, C.J.T., H.A.J.M. Toussaint, and J. Goudriaan, Separating the diffuse and direct\n\ncomponent of global radiation and its implications for modeling canopy photosynthesis Part I. Components of incoming radiation. Agricultural and Forest Meteorology, 1986. 38(1): p. 217-229.  \n\nExamples\n\n# Daily diffuse fraction of january 1st at latitude 35 N, with a RAD of 25 MJ m-2 day-1 :\ndiffuse_fraction(1,25.0,35.0)\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.dynacof-Tuple{}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.dynacof","text":"dynacof(;period::Array{String,1}= [\"0000-01-01\", \"0000-01-02\"], input_path=\"package\",\n         file_name= (constants= \"constants.jl\",site=\"site.jl\",meteo=\"meteorology.txt\",soil=\"soil.jl\",coffee=\"coffee.jl\",tree=\"tree.jl\")\n\nDynamic Agroforestry Coffee Crop Model\n\nThe DynACof process-based model computes plot-scale Net Primary Productivity, carbon allocation, growth, yield, energy, and water balance of coffee plantations according to management, while accounting for spatial effects using metamodels from the 3D process-based model MAESPA. The model also uses cohorts for the development of the coffee buds and fruits to better represent fruit carbon demand distribution along the year.\n\nArguments\n\nperiod::Array{String,1}: A vector of two character string as POSIX dates that correspond to the min and max dates for the desired time\n\nperiod to be returned. The default value [\"0000-01-01\", \"0000-01-02\"] makes the function take the min and max values from the meteorology file.\n\ninput_path::String: Path to the input parameter list folder. Default to \"package\", wich makes DynACof use the package default parameter values.\nfile_name::NamedTuple{(:constants, :site, :meteo, :soil, :coffee, :tree),NTuple{6,String}}: A list of input file names :\nconstants: Physical constants file. Default: \"constants.jl\". More info in the corresponding structure: constants.\nsite: Site parameters file name, see details. Default: \"site.jl\". More info in the corresponding structure: site\nmeteo: Meteorology file name, see details section. Default: \"meteorology.txt\". More info in the meteorology reading function meteorology.\nSoil: Soil parameters file name, see details. Default: \"soil.jl\". More info in the corresponding structure: soil.\nCoffee: Coffee parameters file name, see details. Default: \"coffee.jl\". More info in the corresponding structure: coffee.\nTree: Shade tree parameters file name, see details. Default: \"tree.jl\". More info in the corresponding structure: tree.\n\nDefault input files are provided with the package as an example parameterization. To use the default parameters, you can either set inputpath=\"package\" for using all defaults, or set the desired default file to \"package\" in `filename, *e.g.* to use the default constants, but user-defined other parameters:file_name= (constants= \"package\",site=\"site.jl\",meteo=\"meteorology.txt\",soil=\"soil.jl\",coffee=\"coffee.jl\",tree=\"tree.jl\")`\n\nReturn\n\nReturn a three objects Sim, Meteo and Parameters. To get the objects from a dynacof call: Sim, Meteo, Parameters= dynacof(...)\n\nSim: A data.frame of the simulation outputs at daily time-step:\n\nType Var unit Definition\nGeneral Cycle - Plantation cycle ID\n date Posix date (Y-m-d) Simulation date\n year Year Simulation year\n Plot_Age year Plantation age (starting at 1)\n PlotAgenum year (numeric) Numeric age of plantation\n LAIplot m2 leaves m-2 soil Plot (Coffee + Shade Tree if any) Leaf Area Index\nSuffixes for Coffee organs x_RE - Reserves\n x_SCR - Stump and Coarse roots\n x_Fruit - Fruit\n x_Shoot - Resprout wood (= branches)\n x_FRoot - Fine roots\n x_Leaf  Leaves\nSuffixes for Shade Tree org. xRETree - Reserves\n xStemTree - Stem (= trunk)\n xBranchTree - Branches\n xCoarseRootTree - Coarse roots\n xFRootTree - Fine roots\n xLeafTree  Leaves\nEnergy Rn_tot MJ m-2 d-1 System net radiation\n Rn_Tree MJ m-2 d-1 Shade tree net radiation\n Rn_Coffee MJ m-2 d-1 Coffee net radiation\n Rn_Soil MJ m-2 d-1 Soil net radiation\n RnSoilSW MJ m-2 d-1 Soil net radiation computed using Shuttleworth & Wallace (1985) for reference\n LE_x MJ m-2 d-1 System / Coffee / Tree / Soil latent heat\n H_x MJ m-2 d-1 System / Coffee / Tree / Soil sensible heat\n Q_Soil MJ m-2 d-1 Soil heat transport\n Transmittance_Tree fraction Fraction of light transmitted by the shade trees\n PARTransTree MJ m-2 d-1 Light transmitted by the shade trees canopy\n PAR_Trans MJ m-2 d-1 Light transmitted by the Coffea canopy\n K_Dir - Direct light extinction coefficient\n K_Dif - Diffuse light extinction coefficient\n APAR MJ m-2 d-1 Absorbed PAR by the plant\n APAR_Dif MJ m-2 d-1 Absorbed diffuse PAR (Direct is APAR-APAR_Dif)\n lue gC MJ Light use efficiency\n Tleaf_Coffee deg C Coffee canopy temperature computed by DynACof\n TairCanopy_x deg C Air tempetature at the center of the layer\n Gbhx m s-1 Coffee / Tree conductance to heat\n Gbaircanopy m s-1 Bulk (no tree) or canopy layer to canopy layer aerodynamic conductance\n airdensityx kg m-3 Air density inside the canopy of the tree or the coffee (see air_density)\n WindSpeed_x m s-1 Wind speed at the center of the layer\n DegreeDays_Tcan deg C Growing degree days computed using Coffee Canopy Temperature\nCarbon GPP gC m-2 d-1 Gross primary productivity\n Consumption_RE gC m-2 d-1 Daily reserve consumption\n CarbonLackMortality gC m-2 d-1 Mortality from a higher carbon consumption than Supply\n Rm gC m-2 d-1 Total Coffee maintenance respiration\n Rm_x gC m-2 d-1 Maintenance respiration at organ scale\n Rg gC m-2 d-1 Total Coffee growth respiration\n Rg_x gC m-2 d-1 Growth respiration at organ scale\n Ra gC m-2 d-1 Coffee layer autotrophic respiration (=Rm+Rg)\n Demand_x gC m-2 d-1 C demand at organ scale (fruit, leaf and fine root only)\n Alloc_x gC m-2 d-1 C allocation to organ net of Rm (NPP+Rg)\n Supply gC m-2 d-1 C supply at the begining of the day at layer scale (GPP+Reserve consumption-Rm)\n Supply_x gC m-2 d-1 C supply to organ, net of Rm\n NPP gC m-2 d-1 Net primary productivity at layer scale\n NPP_x gC m-2 d-1 Net primary productivity at organ scale\n Mnat_x gC m-2 d-1 Organ natural mortality (= due to lifespan)\n Mprun_x gC m-2 d-1 Organ mortality due to pruning\n M_ALS gC m-2 d-1 Coffee leaf mortality from American Leaf Spot\n Mortality_x gC m-2 d-1 Total organ mortality\n LAI m2 leaves m-2 soil Leaf Area Index\n CM_x gC m-2 d-1 Organ C mass\n DM_x gDM m-2 d-1 Organ dry mass\nFruit development BudInitPeriod boolean Bud initiation period (BIP)\n Budinit Buds d-1 Total Number of Buds Initiated per day\n ratioNodestoLAI Nodes LAI-1 Number of fruiting nodes per LAI unit\n TempcorBud fraction Temperature correction factor for bud development\n pbreak 0-1 Daily probability of bud dormancy break\n BudBreak Buds d-1 Total number of buds breaking dormancy per day\n SM g m-2 d-1 Coffee Fruit Sucrose Mass\n SC g Sugar gDM Coffee Fruit Sucrose Content\n Maturation_duration days Fruit cohort-1 Coffee Fruit Total Maturation Duration for each cohort\n HarvestMaturityPot Fraction Daily average fruit maturity (0-1)\n Date_harvest day of year date of harvest\n Harvest_Fruit gC m-2 Total fruit carbon mass at harvest\n Yield_green kg ha-1 Yield of green coffee bean\n Harvest_Maturity Fraction Average fruit maturity at harvest (0-1)\n Overriped_Fruit gC m-2 d-1 Overriped fruits that fall onto the ground\nWater IntercMax mm Maximum potential rainfall interception by canopy\n CanopyHumect mm Rainfall interception by canopy\n Throughfall mm Rainfall not intercepted by the canopy, coming to the soil\n SuperficialRunoff mm Water runoff from the superficial soil layer\n ExcessRunoff mm Discharge from the superficial soil layer\n TotSuperficialRunoff mm Sum of discharge+ExcessRunoff\n InfilCapa mm Superficial water infiltration capacity to first layer of soil\n Infiltration mm Superficial water infiltration to first layer of soil\n Drain_[1-3] mm Water drainage from soil layer 1, 2 or 3\n WSurfaceRes mm Soil water content from the surface layer\n W_tot mm Total soil profile water content\n W_[1-3] mm Soil water content from the layer 1, 2 or 3\n REW_tot - Relative extractable water from the soil\n REW_[1-3] - Relative extractable water from the layer 1, 2 or 3\n EW_tot mm Extractable water from the soil\n EW_[1-3] mm Extractable water from the layer 1, 2 or 3\n SWD mm soil water deficit\n RootWaterExtract_[1-3] mm Root water extraction for soil layer 1 to 3\n IntercRevapor mm Evaporation by canopy\n T_x mm Transpiration at system / Coffee / Tree scale\n E_Soil mm Soil evaporation\n ETR mm System evapotranspiration\n SoilWaterPot MPa Soil water potential\n PSIL_* Mpa Coffee leaf water potential\nSpecial shade tree variables LA_Tree m2 leaves tree-1 shade tree leaf area\n CrownHTree m Crown height\n TrunkHTree m Trunk height\n Height_Tree m Shade tree total height (used for boundary conductance), set to 0 if no shade trees\n DBH_Tree m Diameter at breast height\n LAD_Tree m2 m-3 Shade tree Leaf Area Density\n CrownRad_Tree m Crown radius\n CrownProj_Tree m2 crown tree-1 Crown projection\n Stocking_Tree tree m-2 Shade tree density\n TimetoThin_Tree boolean Days on which tree is thinned\n MThinningxTree gc m-2 d-1 Mortality due to thining at organ scale\n\nMeteo: A data.frame of the input meteorology, potentially coming from the output of [Meteorology()]:\n\nVar unit Definition If missing\nDate POSIXct Date in POSIXct format Computed from start date parameter, or set a dummy date if missing\nyear year Year of the simulation Computed from Date\nDOY day day of the year Computed from Date\nRain mm Rainfall Assume no rain\nTair Celsius Air temperature (above canopy) Computed from Tmax and Tmin\nTmax Celsius Maximum air temperature during the day Required (error)\nTmin Celsius Minimum air temperature during the day Required (error)\nRH % Relative humidity Not used, but prefered over VPD for Rn computation\nRAD MJ m-2 d-1 Incident shortwave radiation Computed from PAR\nPressure hPa Atmospheric pressure Computed from VPD, Tair and Elevation, or alternatively from Tair and Elevation.\nWindSpeed m s-1 Wind speed Taken as constant: Parameters -> WindSpeed\nCO2 ppm Atmospheric CO2 concentration Taken as constant: Parameters -> CO2\nDegreeDays Celsius Growing degree days Computed using GDD\nPAR MJ m-2 d-1 Incident photosynthetically active radiation Computed from RAD\nFDiff Fraction Diffuse light fraction Computed using diffuse_fraction using Spitters et al. (1986) formula\nVPD hPa Vapor pressure deficit Computed from RH\nRn MJ m-2 d-1 Net radiation (will be depreciated) Computed using Rad_net with RH, or VPD\nDaysWithoutRain day Number of consecutive days with no rainfall Computed from Rain\nAir_Density kg m-3 Air density of moist air (ρ) above canopy Computed using air_density\nZEN radian Solar zenithal angle at noon Computed from Date, Latitude, Longitude and Timezone\n\nParameters: A list of the input parameters (see import_parameters, constants, soil, coffee, tree)\n\nDetails\n\nAlmost all variables for coffee exist also for shade trees with the suffix _Tree after the name of the variable, e.g.: LAI = coffee LAI, LAITree = shade tree LAI. Special shade tree variables (see return section) are only optional, and there may have more variables upon parameterization because variables can be added in the parameter file for metamodelstree or Allometries for example.\n\nNote\n\nFor simulations with custom initialisations (e.g. at age > 0), or running a simulation day by day, see dynacof_i!.\n\nExamples\n\n# A simulation with the default parameter files from the package, and an example meteorology file from the `DynACof.jl_inputs` repository:\nfile= download(\"https://raw.githubusercontent.com/VEZY/DynACof.jl_inputs/master/meteorology.txt\")\nSim, Meteo, Parameters= dynacof(input_path= dirname(file), file_name= (constants= \"package\",site=\"package\",meteo=basename(file),soil=\"package\",\ncoffee=\"package\",tree=\"package\"))\nrm(file)\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.dynacof_i!-Tuple{Any,DataFrames.DataFrame,DataFrames.DataFrame,Any}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.dynacof_i!","text":"dynacof_i!(i,Sim::DataFrame,Met_c::DataFrame,Parameters)\n\nUsing DynACof one iteration after another. Allows to run a DynACof simulation with starting at age > 0 with initializations.\n\nArguments\n\ni: Either an integer, or a range giving the day of simulation needed. Match the row index, so i=366 make a simulation\n\nfor the 366th row of Sim and Met.\n\nSim::DataFrame: The simulation DataFrame (see dynacof), initialized using dynacof_i_init;\nMet_c::DataFrame: The meteorology DataFrame (see meteorology), initialized using dynacof_i_init\nParameters: The parameters for the model (see import_parameters), initialized using dynacof_i_init\n\nExamples\n\n\n# Making a regular simulation using example data:\nfile= download(\"https://raw.githubusercontent.com/VEZY/DynACof.jl_inputs/master/meteorology.txt\")\n\n# Initialize the simulation:\nSim, Meteo, Parameters= dynacof_i_init(1:365,input_path= dirname(file), file_name= (constants= \"package\",site=\"package\",meteo=basename(file),soil=\"package\",coffee=\"package\",tree=\"package\"))\nrm(file)\n\nSim2= copy(Sim)\nMeteo2= copy(Meteo)\n# Changing the value of Tair in the meteorology for day 366 for S2:\nMeteo2.Tair[366]= Meteo2.Tair[366]+10.0\n\n# Make a computation for each:\ndynacof_i!(366,Sim,Meteo,Parameters)\ndynacof_i!(366,Sim2,Meteo2,Parameters)\n\n# Compare the values of e.g. the maitenance respiration:\nSim.Rm[366]\nSim2.Rm[366]\n\n# To run DynACof for several days, use a range for i:\nS= dynacof_i(367:nrow(Meteo),Sim,Meteo,Parameters)\n# NB: nrow(Meteo) or nrow(Sim) is the maximum length we can simulate. To increase a simulation,\n# initialize it with a wider range for the \"Period\" argument (see [`dynacof_i_init`](@ref)).\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.dynacof_i_init-Tuple{Any}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.dynacof_i_init","text":"dynacof_i_init(i,Sim::DataFrame,Met_c::DataFrame,Parameters)\n\nInitialize a DynACof simulation to be used in dynacof_i.\n\nArguments\n\ni: A range giving the days that will be simulated for initialization. Should be >= 365 days.\n\nArguments\n\nperiod::Array{String,1}: A vector of two character string as POSIX dates corresponding to the min and max dates for the whole simulation (used\n\nto pre-allocate the simulation Data.Frame). It is not the days that will be simulated during initialization, but the whole range possible for simulation afterwards. The default value [\"0000-01-01\", \"0000-01-02\"] makes the function take the min and max values from the meteorology file.\n\ninput_path::String: Path to the input parameter list folder. Default to \"package\", wich makes DynACof use the package default parameter values.\nfile_name::NamedTuple{(:constants, :site, :meteo, :soil, :coffee, :tree),NTuple{6,String}}: A list of input file names :\nconstants: Physical constants file. Default: \"constants.jl\". More info in the corresponding structure: constants.\nsite: Site parameters file name, see details. Default: \"site.jl\". More info in the corresponding structure: site\nmeteo: Meteorology file name, see details section. Default: \"meteorology.txt\". More info in the meteorology reading function meteorology.\nSoil: Soil parameters file name, see details. Default: \"soil.jl\". More info in the corresponding structure: soil.\nCoffee: Coffee parameters file name, see details. Default: \"coffee.jl\". More info in the corresponding structure: coffee.\nTree: Shade tree parameters file name, see details. Default: \"tree.jl\". More info in the corresponding structure: tree.\n\nDefault input files are provided with the package as an example parameterization. To use the default parameters, you can either set inputpath=\"package\" for using all defaults, or set the desired default file to \"package\" in `filename, *e.g.* to use the default constants, but user-defined other parameters:file_name= (constants= \"package\",site=\"site.jl\",meteo=\"meteorology.txt\",soil=\"soil.jl\",coffee=\"coffee.jl\",tree=\"tree.jl\")`\n\nReturn\n\nReturn three objects: Sim, Meteo and Parameters. To get the objects from the call: Sim, Meteo, Parameters= dynacof_i_init(...). See dynacof for more details.\n\nExamples\n\n\n# Making a regular simulation using example data:\nfile= download(\"https://raw.githubusercontent.com/VEZY/DynACof.jl_inputs/master/meteorology.txt\")\nSim, Meteo, Parameters= dynacof_i_init(1:365,input_path= dirname(file), file_name= (constants= \"package\",site=\"package\",meteo=basename(file),soil=\"package\",coffee=\"package\",tree=\"package\"))\nrm(file)\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.energy_model_coffee!","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.energy_model_coffee!","text":"Energy fluxes models\n\nComputes the energy-related variables such as H, LE, Tleaf for the shade tree or the coffee.\n\nReturn\n\nNothing, modify the DataFrame of simulation Sim in place. See dynacof for more details.\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.energy_model_tree!","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.energy_model_tree!","text":"Energy fluxes models\n\nComputes the energy-related variables such as H, LE, Tleaf for the shade tree or the coffee.\n\nReturn\n\nNothing, modify the DataFrame of simulation Sim in place. See dynacof for more details.\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.energy_water_models!-NTuple{4,Any}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.energy_water_models!","text":"Energy and water models\n\nComputes the energy and water related variables for the shade tree (if any), the coffee and the soil. Call  different sub-models:\n\nlight_model_tree! for the light interception of the shade tree  \nlight_model_coffee! for the light interception of the coffee  \nenergy_model_tree! for the energy fluxes of the tree (H, LE, Tleaf...)  \nenergy_model_coffee! for the energy fluxes of the coffee (H, LE, Tleaf...)  \nsoil_model! the full soil model (water transport, H, T Soil...)  \nbalance_model! the energy balance at plot scale model (H, LE, Rn...)  \n\nReturn\n\nNothing, modify the DataFrame of simulation Sim in place. See dynacof for more details.\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.esat","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.esat","text":"esat(20.0,\"Sonntag_1990\")\n\nComputes the saturation vapor pressure (Esat)\n\nArguments\n\nTair::Float64: Air temperature (°C)\nformula::String: (optional) Formula to be used for the calculation of esat and the slope of esat. One of \"Sonntag_1990\" (Default),\n\n\"Alduchov1996\", or \"Allen1998\".\n\nReturns\n\nEsat, the saturation vapor pressure (kPa)\n\nExamples\n\nesat(20.0,\"Allen_1998\")\n\nReference\n\nThis function is translated from the R package bigleaf.\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.esat_slope","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.esat_slope","text":"esat_slope(20,\"Allen_1998\")\n\nComputes Δ, the slope of the saturation vapor pressure at given air temperature.\n\nArguments\n\nTair::Float64: Air temperature (°C)\nformula::String: (optional) Formula to be used for the calculation of esat and the slope of esat. One of \"Sonntag_1990\" (Default),\n\n\"Alduchov1996\", or \"Allen1998\".\n\nReturns\n\nΔ, the slope of the saturation vapor pressure curve at Tair (kPa K^-1)\n\nExamples\n\nesat_slope(20.0,\"Allen_1998\")\n\nReference\n\nThis function is translated from the R package bigleaf.\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.import_parameters","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.import_parameters","text":"import_parameters(path::String,Names)\n\nImport the model parameters from local files, or from default values in the parameter structures: \n\nconstants\nsite\nsoil\ncoffee\ntree (for a simulation of a monocrop coffee plantation, use an empty string for the tree, see example)\n\nArguments\n\npath::String: The path to the parameter files folder. If path= \"package\", take the default files from the package\nNames::NamedTuple{(:constants, :site, :meteo, :soil, :coffee, :tree),NTuple{6,String}}: list the file names. \n\nDetails\n\nFor the full list of parameters and the format of the parameter files, see site.\n\nReturn\n\nA list of all input parameters for DynACof\n\nExamples\n\n# Default from package: \nimport_parameters(\"package\")\n\n# Reading it from local files: \nimport_parameters(\"D:/parameter_files\",(constants= \"constants.jl\",site=\"site.jl\",meteo=\"meteorology.txt\",soil=\"soil.jl\",coffee=\"coffee.jl\",tree=\"tree.jl\"))\n\n# For a coffee monocrop (without shade trees)\nimport_parameters(\"D:/parameter_files\",(constants= \"constants.jl\",site=\"site.jl\",meteo=\"meteorology.txt\",soil=\"soil.jl\",coffee=\"coffee.jl\",tree=\"\"))\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.initialise!-Tuple{DataFrames.DataFrame,DataFrames.DataFrame,Any}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.initialise!","text":"Initialise model variables.\n\nArguments\n\nSim::DataFrame: The simulation DataFrame\nMet_c::DataFrame: The meteorology DataFrame\nParameters: The parameters for the model\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.is_missing-Tuple{DataFrames.DataFrame,String}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.is_missing","text":"is_missing(MetData, \"Date\")\n\nFind if a column is missing from a DataFrame.\n\nArguments\n\ndata::DataFrame: a DataFrame\nkey::String: a column name\n\nReturn\n\nA boolean: true if the column is missing, false if it is present.\n\nExamples\n\ndf= DataFrame(A = 1:10)\nis_missing(df,\"A\")\nfalse\nis_missing(df,\"B\")\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.is_missing-Tuple{NamedTuple,String}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.is_missing","text":"is_missing(data::NamedTuple,key::String)\n\nFind if a key is missing from a tuple.\n\nArguments\n\ndata::NamedTuple: a named tuple\nkey::String: a key (parameter) name\n\nReturn\n\nA boolean: true if the key is missing, false if it is present.\n\nExamples\n\nParameters= Dict(\"Stocking_Coffee\"=> 5580)\nis_missing(Parameters,\"Stocking_Coffee\")\nfalse\nis_missing(Parameters,\"B\")\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.latent_heat_vaporization","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.latent_heat_vaporization","text":"Latent Heat of Vaporization\n\nComputes the latent heat of vaporization as a function of air temperature.\n\nArguments\n\nTair::Float64: Air temperature (deg C)\n\nDetails\n\nThe following formula is used: λ = (2.501 - 0.00237*Tair) * 10^6\n\nReturn\n\nλ -\tThe latent heat of vaporization (J kg-1)\n\nReferences\n\nThis function is adapted from the code of bigleaf::latent.heat.vaporization\n\nStull, B., 1988: An Introduction to Boundary Layer Meteorology (p.641) Kluwer Academic Publishers, Dordrecht, Netherlands\nFoken, T, 2008: Micrometeorology. Springer, Berlin, Germany.\n\nExamples\n\nlatent_heat_vaporization(20.0)  \n\n\n\n\n\n","category":"function"},{"location":"#DynACof.light_model_coffee!","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.light_model_coffee!","text":"Light interception models\n\nComputes the light interception (and transmission) for the shade tree or the coffee.\n\nReturn\n\nNothing, modify the DataFrame of simulation Sim in place. See dynacof for more details.\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.light_model_tree!","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.light_model_tree!","text":"Light interception models\n\nComputes the light interception (and transmission) for the shade tree or the coffee.\n\nReturn\n\nNothing, modify the DataFrame of simulation Sim in place. See dynacof for more details.\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.logistic","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.logistic","text":"Compute a logistic function or its derivative\n\nArguments\n\nx::Float:       The x value\nu_log::Float64:  Inflexion point (x-value of the sigmoid's midpoint)\ns_log::Float64:  Steepness of the curve\n\nReturn\n\nlogistic: the logistic function\nlogistic_deriv: the derivative of the logistic function\n\nSeealso\n\nMore informations can be found in the wikipedia page\n\nExamples\n\nlogistic(1:10,5,0.1)\nlogistic_deriv(1:10,5,0.1)\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.logistic_deriv","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.logistic_deriv","text":"Compute a logistic function or its derivative\n\nArguments\n\nx::Float:       The x value\nu_log::Float64:  Inflexion point (x-value of the sigmoid's midpoint)\ns_log::Float64:  Steepness of the curve\n\nReturn\n\nlogistic: the logistic function\nlogistic_deriv: the derivative of the logistic function\n\nSeealso\n\nMore informations can be found in the wikipedia page\n\nExamples\n\nlogistic(1:10,5,0.1)\nlogistic_deriv(1:10,5,0.1)\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.mean-Tuple{Any}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.mean","text":"mean(x)\n\nMean of a vector\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.meteorology","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.meteorology","text":"Meteorology(file = NULL, period = NULL, Parameters = Import_Parameters())\n\nImport the meteorology data, check its format, and eventually compute missing variables.\n\nArguments\n\nfile::String: The daily time-step meteorology file path.\nperiod::Array{String,1}: A vector of two character string as POSIX dates that correspond to the min and max dates for the desired time period to be returned.\n\nThe default value [\"0000-01-01\", \"0000-01-02\"] makes the function take the min and max values from the meteorology file.\n\nParameters: A named tuple with parameter values (see import_parameters):\nStart_Date: optional, the Posixct date of the first meteo file record. Only needed if the Date column is missing.\nFPAR      : Fraction of global radiation corresponding to PAR radiation, only needed if either RAD or PAR is missing.\nElevation : elevation of the site (m), only needed if atmospheric pressure is missing\nLatitude  : latitude of the site (degree), only needed if the diffuse fraction of light is missing\nWindSpeed : constant wind speed (m s-1), only needed if windspeed is missing\nCO2       : constant atmospheric CO_2 concentration (ppm), only needed if CO_2 is missing\nMinTT     : minimum temperature threshold for degree days computing (Celsius), see [GDD()]\nalbedo    : site shortwave surface albedo, only needed if net radiation is missing, see [Rad_net()]\n\nDetails\n\nThe imported file is expected to be at daily time-step. The albedo is used to compute the system net radiation that is then used to compute the soil net radiation using an extinction coefficient with the plot LAI following the Shuttleworth & Wallace (1985) formulation. This computation is likely to be depreciated in the near future as the computation has been replaced by a metamodel. It is kept for information for the moment.\n\nVar unit Definition If missing\nDate POSIXct Date in POSIXct format Computed from start date parameter, or set a dummy date if missing\nyear year Year of the simulation Computed from Date\nDOY day day of the year Computed from Date\nRain mm Rainfall Assume no rain\nTair Celsius Air temperature (above canopy) Computed from Tmax and Tmin\nTmax Celsius Maximum air temperature during the day Required (error)\nTmin Celsius Minimum air temperature during the day Required (error)\nRH % Relative humidity Not used, but prefered over VPD for Rn computation\nRAD MJ m-2 d-1 Incident shortwave radiation Computed from PAR\nPressure hPa Atmospheric pressure Computed from VPD, Tair and Elevation, or alternatively from Tair and Elevation.\nWindSpeed m s-1 Wind speed Taken as constant: Parameters -> WindSpeed\nCO2 ppm Atmospheric CO2 concentration Taken as constant: Parameters -> CO2\nDegreeDays Celsius Growing degree days Computed using GDD\nPAR MJ m-2 d-1 Incident photosynthetically active radiation Computed from RAD\nFDiff Fraction Diffuse light fraction Computed using diffuse_fraction using Spitters et al. (1986) formula\nVPD hPa Vapor pressure deficit Computed from RH\nRn MJ m-2 d-1 Net radiation (will be depreciated) Computed using Rad_net with RH, or VPD\nDaysWithoutRain day Number of consecutive days with no rainfall Computed from Rain\nAir_Density kg m-3 Air density of moist air (ρ) above canopy Computed using air_density\nZEN radian Solar zenithal angle at noon Computed from Date, Latitude, Longitude and Timezone\n\nReturns\n\nA daily meteorology DataFrame.\n\nSee also: dynacof\n\nExamples\n\n# Using the example meteorology from the `DynACof.jl_inputs` repository:\nfile= download(\"https://raw.githubusercontent.com/VEZY/DynACof.jl_inputs/master/meteorology.txt\")\nMeteo= meteorology(file,import_parameters())\n# NB: `import_parameters` without arguments uses the package default values\nrm(file)\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.paliv_dis-Tuple{Int64,Float64,Float64,Float64}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.paliv_dis","text":"paliv_dis(Age_Max::Int64,P_Start::Float64,P_End::Float64,k::Float64)\n\nDistributes the percentage of living tissue alonf the lifespan\n\nArguments\n\nAge_Max::Int64: Maximum age of the organ (year)\nP_Start::Float64: Percentage of living tissue at first age (% of dry mass)\nP_End::Float64: Percentage of living tissue at last age (% of dry mass)\nk::Float64: Rate between PStart and PEnd\n\nThe percentage of living tissue is computed as follows: P_End+left((P_Start-P_End)cdot e^seq(0-klengthout=Age_Max)right)\n\nReturn\n\nThe living tissue at each age in % of organ dry mass in the form of a DataFrame\n\nExamples\n\npaliv_dis(40,0.4,0.05,5.0)\n\n40×2 DataFrame\n│ Row │ Age   │ Palive          │\n│     │ Int64 │ Float64         │\n├─────┼───────┼─────────────────┤\n│ 1   │ 1     │ 0.4             │\n│ 2   │ 2     │ 0.357886        │\n│ 3   │ 3     │ 0.320839        │\n│ 4   │ 4     │ 0.288249        │\n⋮\n│ 36  │ 36    │ 0.0539383       │\n│ 37  │ 37    │ 0.0534644       │\n│ 38  │ 38    │ 0.0530476       │\n│ 39  │ 39    │ 0.0526809       │\n│ 40  │ 40    │ 0.0523583       │\n\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.pressure_from_elevation-Tuple{Float64,Float64,Float64}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.pressure_from_elevation","text":"pressure_from_elevation(1000.0, 25.0, 1.5)\n\nComputes the virtual temperature, i.e. the temperature at which dry air would have the same density as moist air at its actual temperature.\n\nArguments\n\nTair::Float64: Air temperature (°C)\npressure::Float64: Atmospheric pressure (kPa)\nVPD::Float64: Vapor pressure deficit (kPa)\nformula::String: (optional) Formula to be used for the calculation of esat. One of \"Sonntag_1990\" (Default),\n\n\"Alduchov1996\", or \"Allen1998\".\n\nC_to_K::Float64: Celsius degree to Kelvin (e.g. 273.15)\npressure0::Float64: reference atmospheric pressure at sea level (kPa)\nRd::Float64: gas constant of dry air (J kg^-1 K^-1), source : Foken p. 245\ng::Float64: gravitational acceleration (m s^-2)\n\nNote\n\nC_to_K and epsi can be found using constants()\n\nReturns\n\nThe atmospheric pressure (kPa)\n\nExamples\n\npressure_from_elevation(600.0, 25.0, 1.5)\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.previous_i","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.previous_i","text":"Find the ith previous index, avoiding 0 or negative indexes.\n\nArguments\n\ni::DataType: Current index\nn: Target number of indexes before x\n\nDetails\n\nThis function is used to find the nth previous index without making an error with negative or 0 index.\n\nExamples\n\n# Find the 10th index before 15:\nprevious_i(15,10)\n5\n# Find the 10th index before 5:\nprevious_i(5,10)\n1\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.psychrometric_constant","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.psychrometric_constant","text":"Psychrometric constant (γ)\n\nArguments\n\nTair::Float64: Air temperature (deg C)\npressure::Float64: Atmospheric pressure (kPa)\nParameters:  Constant parameters, default to constants, if different values are needed, simply make a named tuple with:\ncp: specific heat of air for constant pressure (J K-1 kg-1) \nepsi: ratio of the molecular weight of water vapor to dry air (-)\n\nDetails\n\nThe psychrometric constant (γ) is given as: γ = cp * pressure / (epsi * λ) where λ is the latent heat of vaporization (J kg-1), as calculated from latent_heat_vaporization.\n\nReturn\n\nγ -\tthe psychrometric constant (kPa K-1)\n\nReferences\n\nThis function is adapted from the code of bigleaf::psychrometric.constant\n\nMonteith J.L., Unsworth M.H., 2008: Principles of Environmental Physics. 3rd Edition. Academic Press, London.\n\nExamples\n\npsychrometric_constant(20.0, 100.0)  \n\n\n\n\n\n","category":"function"},{"location":"#DynACof.rH_to_VPD","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.rH_to_VPD","text":"rH_to_VPD(0.5,20,\"Allen_1998\")\n\nConversion from relative humidity (rH) to vapor pressure deficit (VPD).\n\nArguments\n\nrH::Float64: Relative humidity (-)\nTair::Float64: Air temperature (°C)\nformula::String: (optional) Formula to be used for the calculation of esat and the slope of esat. One of \"Sonntag_1990\" (Default),\n\n\"Alduchov1996\", or \"Allen1998\".\n\nReturns\n\nVPD, the vapor pressure deficit (kPa)\n\nExamples\n\nrH_to_VPD(0.5,20.0,\"Allen_1998\")\n\nReference\n\nThis function is translated from the R package bigleaf.\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.read_param_file","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.read_param_file","text":"read_param_file(structure::Symbol,filepath::String=\"package\")\n\nRead DynACof parameter files and create the structure according to its structure. If parameters are missing from the file, the structure is filled with the default values.\n\nArguments\n\nstructure::Int64: The structure type. Must be one of constants, site, soil, coffee, tree\nfilepath::Float64: The path to the parameter file\n\nReturn\n\nThe corresponding structure with the values read from the parameter file.\n\nExamples\n\njulia> read_param_file(:constants)\nconstants(0.0010130000000000007, 0.622, 101.325, 0.5, 9.81, 287.0586, 8.314, 273.15, 0.41, 1.0000000000000006e-6, 1367.0, 5.670367e-8, 0.018, 4.57, 2.45, 0.4,2.15e-5)\n\njulia> read_param_file(:site)\nDynACof.site(\"Aquiares\", \"1979/01/01\", 9.93833, -83.72861, 6, 1040.0, 25.0, 0.58, 0.144)\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.sin°","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.sin°","text":"Trigonometric Functions (degree)\n\nThese functions give the obvious trigonometric functions. They respectively compute the cosine, sine, tangent, arc-cosine, arc-sine, arc-tangent with input and output in degree.\n\nReturns\n\nThe output in degree\n\nDetails\n\nThe conversions between radian to degree is: \n\nx cdot fracpi180\n\nExamples\n\n# cosinus of an angle of 120 degree:\ncos°(120)\n# should yield -0.5, as in the base version:\ncos(120*π/180)\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.soil_model!-NTuple{4,Any}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.soil_model!","text":"Soil module subroutine\n\nMake all computations for soil water balance for the ith day by modifying the Sim DataFrame in place.\n\nArguments\n\nSim::DataFrame: The main simulation DataFrame to make the computation. Is modified in place.\nParameters: A named tuple with parameter values (see import_parameters).\nMet_c::DataFrame: The meteorology DataFrame (see meteorology).\ni::Int64: The index of the day since the first day of the simulation.\n\nReturn\n\nNothing, modify the DataFrame of simulation Sim in place. See dynacof for more details.\n\nNote\n\nThis function shouldn't be called by the user. It is made as a sub-module so it is easier for advanced users to modify the code.\n\nSee also\n\ndynacof\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.struct_to_tuple-Tuple{DataType,Any}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.struct_to_tuple","text":"struct_to_tuple(structure::DataType,instance)\n\nTransform a struct instance into a tuple, keeping the field names and values.  \n\nArguments\n\nstructure::DataType: Any struct\ninstance: An instance of structure.\n\nReturns\n\nA named tuple with names and values from the structure. \n\nExamples\n\nstruct_to_tuple(constants, constants())\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.sun_zenithal_angle-Tuple{Int64,Float64}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.sun_zenithal_angle","text":"sun_zenithal_angle(DOY::Int64, Latitude::Float64)\n\nComputes the sun zenithal angle at noon (solar time).\n\nArguments\n\nDOY::Int64: Ordinal date (integer): day of year from 1st January (day)\nLatitude::Float64: Latitude (deg)\n\nReturns\n\nZEN, the sun zenithal angle (radian)\n\nReferences\n\nsolartime R package from Thomas Wutzler, and more specificly the computeSunPositionDoyHour function (considering the hour at noon).\n\nExamples\n\n# Daily extra-terrestrial radiation on january 1st at latitude 35 N :\nsun_zenithal_angle(1,35.0)\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.tan°","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.tan°","text":"Trigonometric Functions (degree)\n\nThese functions give the obvious trigonometric functions. They respectively compute the cosine, sine, tangent, arc-cosine, arc-sine, arc-tangent with input and output in degree.\n\nReturns\n\nThe output in degree\n\nDetails\n\nThe conversions between radian to degree is: \n\nx cdot fracpi180\n\nExamples\n\n# cosinus of an angle of 120 degree:\ncos°(120)\n# should yield -0.5, as in the base version:\ncos(120*π/180)\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.tree_model!-NTuple{4,Any}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.tree_model!","text":"Shade Tree subroutine\n\nMake all computations for shade trees (similar to coffee, but no fruits) for the ith day by modifying the S list in place.\n\nArguments\n\nSim::DataFrame: The main simulation DataFrame to make the computation. Is modified in place.\nParameters: A named tuple with parameter values (see import_parameters).\nMet_c::DataFrame: The meteorology DataFrame (see meteorology).\ni::Int64: The index of the day since the first day of the simulation.\n\nReturn\n\nNothing, modify the DataFrame of simulation Sim in place. See dynacof for more details.\n\nNote\n\nThis function shouldn't be called by the user. It is made as a \"sub-module\" so it is easier for advanced users to modify the code. No_Shade() is used as an empty function that is called when there are no shade trees.\n\nSee also dynacof\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.virtual_temp-Tuple{Float64,Float64,Float64}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.virtual_temp","text":"virtual_temp(Tair::Float64, pressure::Float64, VPD::Float64; formula::String=\"Sonntag_1990\",C_to_K::Float64=constants().Kelvin, epsi::Float64= constants().epsi)::Float64\n\nComputes the virtual temperature, i.e. the temperature at which dry air would have the same density as moist air at its actual temperature.\n\nArguments\n\nTair::Float64: Air temperature (°C)\npressure::Float64: Atmospheric pressure (kPa)\nVPD::Float64: Vapor pressure deficit (kPa)\nformula::String: (optional) Formula to be used for the calculation of esat. One of \"Sonntag_1990\" (Default),\n\n\"Alduchov1996\", or \"Allen1998\".\n\nC_to_K::Float64: Celsius degree to Kelvin (e.g. 273.15)\nepsi::Float64: Ratio of the molecular weight of water vapor to dry air \n\nNote\n\nC_to_K and epsi can be found using constants()\n\nReturns\n\nT_v, the virtual temperature (°C)\n\nExamples\n\nvirtual_temp(25.0, 1010.0, 1.5, \"Sonntag_1990\")\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.warn_var","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.warn_var","text":"warn_var(\"Date\",\"Start_Date from Parameters\",\"warn\")\n\nWarn or stop execution if mandatory meteorology input variables are not provided. It helps the user to know which variable is missing and/or if there are replacements\n\nArguments\n\nVar::String: Input variable name\nreplacement::String: Replacement variable that is used to compute \"Var\"\ntype::String: Type of error to return : either\n\nNote\n\nThis function helps to debug the model when some mandatory meteorological variables\n\nare missing from input: either an error (default), or a warning.\n\nIf the \"replacement\" variable is not provided in the meteorology file either, this function\n\nwill return an error with a hint on which variables can be provided to compute \"Var\"\n\nExamples\n\nwarn_var(\"Date\",\"Start_Date from Parameters\",\"warn\")\n\n\n\n\n\n","category":"function"},{"location":"#DynACof.warn_var-Tuple{String}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.warn_var","text":"warn_var(\"Date\")\n\nStop execution if mandatory meteorology input variable is not provided.\n\nArguments\n\nVar::String: Input variable name\n\n\n\n\n\n","category":"method"},{"location":"#DynACof.test_ZHT-Tuple{Float64,Float64}","page":"DynACof.jl: The Dynamic Agroforestry Coffee Crop Model","title":"DynACof.test_ZHT","text":"test_ZHT(ZHT::Float64, Z_top::Float64; verbose::Bool= false)::Float64\n\nTest if ZHT is lower than Ztop, and return 1.01 * Ztop if so (or ZHT if not).\n\nArguments\n\nZHT::Float64:       Wind measurement height (m)\nZ_top::Float64:     Average canopy height of the taller crop (m)\nverbose::Bool:      Print information if ZHT < Z_top\n\nExamples\n\ntest_ZHT(8.0, 10.0, verbose= true)\n\n\n\n\n\n","category":"method"}]
}
